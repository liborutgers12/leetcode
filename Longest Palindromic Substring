public class Solution {
    public String longestPalindrome(String s) {
        
        /* Solution based on DP: a DP state is defined as State[i,j] = true, if substring s[i...j] is a Palindrome;
         * otherwise, equals false. The algorithm is bottom up style.
         */
        boolean[][] table = new boolean[s.length()][s.length()];
        
        // All length 1 substring is palindrome
        for(int i = 0; i < s.length(); i++) {
            table[i][i] = true;
        }
        
        int idxStart = 0, maxLen = 1;
        // Check all the length 2 substrings
        for(int i = 0; i < s.length()-1; i++) {
            if(s.charAt(i) == s.charAt(i+1)) {
                table[i][i+1] = true;
                idxStart = i;
                maxLen = 2;
            } else
                table[i][i+1] = false;
        }
        
        // Check substrings of length k>2
        for(int k = 3; k <= s.length(); k++) {
            
            // loop for every substring of length k
            for(int i = 0; i <= s.length()-k; i++) {
                
                // decide substring s[i..i+k-1] based on s[i+1..(i+k-1)-1] and s[i]?=s[i+k-1]
                if(table[i+1][i+k-2]==true && (s.charAt(i) == s.charAt(i+k-1))) {
                    table[i][i+k-1] = true;
                    
                    // update the longest palindrome
                    if(k > maxLen) {
                        idxStart = i;
                        maxLen = k;
                    }
                } else table[i][i+k-1] = false;
            }
        }
        
        return s.substring(idxStart, idxStart + maxLen);
        
    }
    
}
